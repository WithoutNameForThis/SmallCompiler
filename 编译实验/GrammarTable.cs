using System;

namespace 编译实验
{
    partial class GrammarTree
    {
        static class GrammarTable
        {

            /// <summary>
            /// 非终结符 名字表
            /// </summary>
            public static string[] GrammarName =
            {
                "1000>程序",
                "1001>程序体",
                "1002>变量说明",
                "1003>复合句",
                "1004>变量定义",
                "1005>标识符表",
                "1006>复合句",
                "1007>变量定义'",
                "1008>标识符表'",

                "1010>语句表",
                "1011>执行句",
                "1012>语句表'",
                "1013>简单句",
                "1014>结构句",
                "1015>表达式",
                "1017>if句",
                "1018>WHILE句",
                "1022>else句",
                "1019>OutPut句",

                "1100>算术表达式",
                "1022>else句",
                "1022>else句",
                "1101>项",
                "1107>算术表达式'",
                "1102>因子",
                "1103>项'",
                "1104>算术量",
                "1200>布尔表达式",
                "1201>布尔项",
                "1203>布尔表达式'",
                "1204>>布尔项'",
                "1205>布尔因子",
                "1206>布尔量",
                "1207>关系表达式'",
                "1208>关系运算符",

                "9000>空"



            };

        
            /// <summary>
            /// 语法规则表 [词语]:[当前非终结符]>[推出的结果]
            /// </summary>
            public static string[] GrammarRule = {
                "8:1000>8,38,1001,99",//〈程序〉→ program〈标识符〉〈程序体 1001〉.
                "22:1001>1002,1003",//〈程序体1001〉→〈变量说明1002〉〈复合句1003〉
                "0:1001>1002,1003",

                "22:1002>22,1004",//〈变量说明1002〉→ var〈变量定义1004〉|ε
                "0:1002>9000",

                "38:1004>1005,45,1006,47,1007",//〈变量定义〉→〈标识符表〉：〈类型〉；｜〈标识符表〉：〈类型〉；〈变量定义〉
                "38:1007>1004",
                "0:1007>9000",

                "38:1005>38,1008",//〈标识符表〉→〈标识符〉，〈标识符表〉｜〈标识符〉
                "48:1008>48,1005",
                "45:1008>9000",

                "2:1006>2",//〈类型名〉→ integer｜bool | real
                "3:1006>3",
                "4:1006>4",
                "5:1006>5",

                "0:1003>0,1010,1",//〈复合句〉→ begin〈语句表〉end

                "17:1010>1011,47,1012",//〈语句表〉→〈执行句1011〉；〈语句表'〉；
                "38:1010>1011,47,1012",
                "13:1010>1011,47,1012",
                "7:1010>1011,47,1012",

                "1:1012>9000",
                "38:1012>1010",
                "17:1012>1010",
                "13:1012>1010",
                "7:1012>1010",

                "38:1011>1013",//〈执行句〉→〈简单句〉

                "17:1011>1014",//〈执行句〉→〈结构句〉
                "0:1011>1014",//〈执行句〉→〈结构句〉
                "13:1011>1014",
                "7:1011>1014",

                "38:1013>38,37,1015",//〈简单句〉→〈标识符〉：＝〈表达式〉

                "0:1014>1003",//〈结构句〉→〈复合句〉｜〈if句〉｜〈WHILE句〉
                "17:1014>1017",
                "13:1014>1018",
                "7:1014>1019",//output句

                "17:1017>17,1200,18,1011,1022",//〈if句〉→ if〈布尔表达式〉then〈执行句〉| if〈布尔表达式〉then〈执行句〉else〈执行句〉
                "47:1022>9000",
                "19:1022>19,1011",
            
                "13:1018>13,1200,14,1011",//〈while句〉→ while〈布尔表达式〉do〈执行句〉

                "7:1019>7,43,38,44",//output句 -> output(<标识符>)

                "38:1015>1100",//〈表达式〉→〈算术表达式〉
                "31:1015>1100",//〈表达式〉→〈算术表达式〉
                "43:1015>1100",//〈表达式〉→〈算术表达式〉

                "43:1015>1200",//〈表达式〉→〈布尔表达式〉
                "42:1015>1200",//〈表达式〉→〈布尔表达式〉
                //"33:1015>1200",//〈表达式〉→〈布尔表达式〉
                //"33:1015>1200",//〈表达式〉→〈布尔表达式〉

                "38:1100>1101,1107",//〈算术表达式〉→〈项:1101 〉〈算术表达式'〉
                "31:1100>1101,1107",//〈算术表达式〉→〈项:1101 〉〈算术表达式'〉
                "43:1100>1101,1107",//〈算术表达式〉→〈项:1101 〉〈算术表达式'〉

                "24:1107>24,1101,1107",//〈算术表达式'〉→ +〈项:1101 〉〈算术表达式'〉
                "25:1107>25,1101,1107",//〈算术表达式'〉→ -〈项:1101 〉〈算术表达式'〉
                "47:1107>9000",//〈算术表达式'〉→ empty
                "44:1107>9000",//〈项'〉→ empty
                "19:1107>9000",//else

                "38:1101>1102,1103",//〈项〉→〈因子〉〈项'〉
                "31:1101>1102,1103",//〈项〉→〈因子〉〈项'〉
                "43:1101>1102,1103",//〈项〉→〈因子〉〈项'〉

                "26:1103>26,1102,1103",//〈项'〉→*〈因子〉〈项'〉
                "27:1103>27,1102,1103",//〈项'〉→/〈因子〉〈项'〉
                "47:1103>9000",//〈项'〉→ empty
                "44:1103>9000",
                "24:1103>9000",
                "25:1103>9000",
                "19:1103>9000",//else


                "38:1102>1104",//〈因子〉→〈算术量〉
                "31:1102>1104",//〈因子〉→〈算术量〉
                "43:1102>43,1100,44",//〈因子〉→（〈算术表达式〉）

                "38:1104>38",//〈算术量〉→〈标识符〉
                "31:1104>31",//〈算术量〉→〈实数〉

                "33:1200>1201,1203",//〈布尔表达式〉→〈布尔项〉〈布尔表达式'〉
                "43:1200>1201,1203",
                "42:1200>1201,1203",
                "38:1200>1201,1203",

                "32:1203>32,1201,1203",//〈布尔表达式'〉→or 〈布尔项〉〈布尔表达式'〉
                "47:1203>9000",//〈布尔表达式'〉→empty
                "44:1203>9000",
                "18:1203>9000",
                "19:1203>9000",//else
                "14:1203>9000",//do

                "33:1201>1205,1204",//〈布尔项 1201〉→〈布尔因子 1205〉〈布尔项' 1204〉
                "43:1201>1205,1204",
                "42:1201>1205,1204",
                "38:1201>1205,1204",

                "31:1204>31,1205,1204",//〈布尔项' 1204〉→and〈布尔因子 1205〉〈布尔项' 1204〉
                "47:1204>9000",//〈布尔项' 1204〉→empty
                "44:1204>9000",
                "32:1204>9000",
                "18:1204>9000",
                "19:1204>9000",//else
                "14:1204>9000",//do

                "33:1205>33,1205",//〈布尔因子〉→ not〈布尔因子〉
                "43:1205>1206",//〈布尔因子〉→ 〈布尔量〉
                "42:1205>1206",
                "38:1205>1206",

                "43:1206>43,1200,44",//〈布尔量〉→〈布尔常数〉｜〈标识符〉〈关系表达式'〉｜（〈布尔表达式〉）
                "42:1206>42",
                "38:1206>38,1207",

                "29:1207>1208,38",//〈关系表达式'〉→〈关系运算符〉〈标识符〉
                "34:1207>1208,38",
                "28:1207>1208,38",
                "35:1207>1208,38",
                "30:1207>1208,38",
                "36:1207>1208,38",

                "31:1207>9000",//empty
                "47:1207>9000",
                "44:1207>9000",
                "32:1207>9000",
                "18:1207>9000",
                "14:1207>9000",//do

                "29:1208>29",//〈关系运算符〉→〈|〈＝ | ＝| 〉＝| 〉|〈〉
                "34:1208>34",
                "28:1208>28",
                "35:1208>35",
                "30:1208>30",
                "36:1208>36",
            
            };

            /// <summary>
            /// 获取指定非终结符的名称
            /// </summary>
            /// <param name="GrammarIndex">非终结符号</param>
            /// <returns>名称</returns>
            public static string GetName(int GrammarIndex)
            {

                foreach(string str in GrammarName)
                {
                    if (str.Split('>')[0]==GrammarIndex.ToString())
                    {
                        return str.Split('>')[1];
                    }
                }
                return "";
            }


            /// <summary>
            /// 获取添加有指定号码列表的非终结符
            /// </summary>
            /// <param name="GrammarIndex">非终结符</param>
            /// <param name="WordType">词语号码</param>
            /// <param name="father">父亲节点</param>
            /// <returns>添加有指定号码列表的非终结符</returns>
            public static GrammarItem GetGrammarItem(int GrammarIndex, int WordType,GrammarItem father)
            {
                for(int i = 0; i < GrammarRule.Length; i++)
                {
                    if (GrammarRule[i].Split('>')[0].Split(':')[1] == GrammarIndex.ToString() && 
                        GrammarRule[i].Split('>')[0].Split(':')[0] == WordType.ToString())
                    {


                        string[] stres = GrammarRule[i].Split('>')[1].Split('|')[0].Split(',');
                        int[] tar = new int[stres.Length];
                        object[] items = new object[stres.Length];
                        //将其能推出的内容号码进行记录
                        for(int j=0;j<stres.Length;j++)
                        {
                            tar[j] = int.Parse(stres[j]);
                        }
                        //记录其父亲节点
                        GrammarItem gi = new GrammarItem(father);
                        gi.Sign = tar;
                        gi.Items = items;
                        gi.Num = GrammarIndex;
                        gi.ItemStr = GrammarRule[i].Split('>')[1];
                        gi.GrammarStr = GrammarRule[i].Split(':')[1];

                        return gi;
                    }
                }
                //如果是空
                GrammarItem gie = new GrammarItem(father);
                if (GrammarIndex == 9000)
                {
                    gie.Num = 9000;
                    
                    gie.Sign = null;
                    return gie;
                }

                //返回空 交给语法分析器报错
                return null;
            }


        }
    }

   


}
